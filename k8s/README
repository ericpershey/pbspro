# Notes:
# 1.  make sure you have created new images if you updated them.
# 2.  Don't use _ no matter what you think, kube doesn't like it in the names
# 3.  apply creates the objects in kubernetes and runs them 
# 4.  deployments are for scaling, pods are just used to test.  deployments create pods using a template.

# BASH: Start minikube cluster and build the PBS Pro Docker images
minikube start --memory 4gb
eval $(minikube docker-env)
KUBE_IP=$(minikube ip)
echo $KUBE_IP
cd k8s; ./build_images.sh; cd ..

# XONSH: Start minikube cluster and build the PBS Pro Docker images
minikube start --memory 4gb
minikube docker-env - > /tmp/minikube_docker-env
source-bash /tmp/minikube_docker-env
$KUBE_IP=$(minikube ip).strip()
echo $KUBE_IP
cd k8s; ./build_images.sh; cd ..

# GENERIC: Start the PBS Pro Cluster
kubectl apply -f k8s/pbspro-cluster-rbac.yml
# kubectl apply -f k8s/pbspro-cluster-deployment-server.yml
# kubectl apply -f k8s/pbspro-cluster-deployment-node.yml
# kubectl apply -f k8s/pbspro-cluster-statefulset-server.yml
# create the service to link them
kubectl apply -f k8s/pbspro-cluster-pod-server-service.yml
kubectl apply -f k8s/pbspro-cluster-statefulset-node-service.yml
# apply configmaps before the pods
kubectl apply -f k8s/pbspro-cluster-job-scripts.yml
kubectl apply -f k8s/pbspro-cluster-statefulset-node-configmap.yml
kubectl apply -f k8s/pbspro-cluster-pod-server-configmap.yml
# create the server
kubectl apply -f k8s/pbspro-cluster-pod-server.yml
# create the nodes
kubectl apply -f k8s/pbspro-cluster-statefulset-node.yml

# BASH: Get PBS Cluster environment
#POD_PBS_SERVER=$(kubectl get pod -l app=pbspro-server -o jsonpath="{.items[0].metadata.name}")
POD_PBS_SERVER=$(kubectl get pod -l app=pbspro-server -o jsonpath="{.items[0].metadata.name}")
POD_PBS_NODE=$(kubectl get pod -l app=pbspro-node -o jsonpath="{.items[0].metadata.name}")
echo $POD_PBS_SERVER $POD_PBS_NODE

# XONSH: Get PBS Cluster environment
#$POD_PBS_SERVER=$(kubectl get pod -l app=pbspro-server -o jsonpath="{.items[0].metadata.name}").strip('\'').strip('"')
$POD_PBS_SERVER=$(kubectl get pod -l app=pbspro-server -o jsonpath="{.items[0].metadata.name}").strip('\'').strip('"')
$POD_PBS_NODE=$(kubectl get pod -l app=pbspro-node -o jsonpath="{.items[0].metadata.name}").strip('\'').strip('"')
echo $POD_PBS_SERVER $POD_PBS_NODE

# GENERIC: Operate on PBS Cluster
kubectl exec -it $POD_PBS_SERVER -- cat /etc/resolv.conf
kubectl exec -it $POD_PBS_NODE -- cat /etc/resolv.conf
kubectl exec -it $POD_PBS_SERVER -- /bin/bash
kubectl exec -it $POD_PBS_NODE -- /bin/bash

# GENERIC: Destroy the PBS Cluster
#kubectl delete pod/$POD_PBS_SERVER
#kubectl delete pod/$POD_PBS_NODE
#kubectl delete -f k8s/pbspro-cluster-statefulset-server.yml
kubectl delete -f k8s/pbspro-cluster-statefulset-node.yml
kubectl delete -f k8s/pbspro-cluster-pod-server.yml
kubectl delete -f k8s/pbspro-cluster-pod-server-service.yml
kubectl delete -f k8s/pbspro-cluster-statefulset-node-service.yml
kubectl delete -f k8s/pbspro-cluster-pod-server-configmap.yml
kubectl delete -f k8s/pbspro-cluster-statefulset-node-configmap.yml
kubectl delete -f k8s/pbspro-cluster-job-scripts.yml

# GENERIC: Destroy the minikube cluster
minikube stop
minikube delete

# Debugging - run the server as a pod:
kubectl apply -f k8s/pbspro-cluster-pod-server.yml
kubectl exec -it $POD_PBS_SERVER -- /bin/bash
kubectl exec -it $POD_PBS_NODE -- /bin/bash


# Debugging - log files
kubectl -n default logs pod/pbspro-pod-server -f

# Debugging - get all pods
kubectl get pods --all-namespaces
kubectl get pods --all-namespaces -w  # watch
kubectl get pod --output=wide
kubectl get pod pbspro-pod-server -o json
kubectl get pod -l app=pbspro-pod-server -o jsonpath="{.items[0].metadata.name}"

# Debugging - images
docker rm pbspro-pod-server
docker run -it --name pbspro-pod-server -h pbs -e PBS_START_MOM=0 pbspro/pbspro_server_202001:centos7
docker exec -it pbspro-pod-server bash

kubectl get pod pbspro-pod-server -o json

#node
kubectl exec -it $POD_PBS_NODE -- /bin/bash
# echo "172.17.0.2 pbspro-pod-server" >> /etc/hosts
sed -i "s/PBS_SERVER=.*/PBS_SERVER=pbspro-pod-server.default.svc.cluster.local/" /etc/pbs.conf
/etc/init.d/pbs restart

#server 
kubectl exec -it $POD_PBS_SERVER -- /bin/bash
# echo "172.17.0.5 pbspro-cluster-node-0" >> /etc/hosts
sed -i "s/PBS_SERVER=.*/PBS_SERVER=pbspro-pod-server.default.svc.cluster.local/" /etc/pbs.conf
/usr/bin/ssh-keygen -A
/usr/sbin/sshd

#both
/opt/pbs/bin/qmgr -c "create node pbspro-cluster-node-0"
/opt/pbs/bin/qmgr -c "create node pbspro-node-0.pbspro-node.default.svc.cluster.local"
sudo /opt/pbs/bin/qmgr -c "create queue default"
sudo /opt/pbs/bin/qmgr -c "set queue default queue_type = Execution"
sudo /opt/pbs/bin/qmgr -c "set queue default enabled = True"
sudo /opt/pbs/bin/qmgr -c "set queue default started = True"
sudo netstat -tulpn | grep LISTEN


kubectl create configmap pbspro-cluster-pod-server-configmap --from-env-file=/etc/pbs.conf
kubectl get configmap pbspro-cluster-pod-server-configmap -o yaml
kubectl delete -f k8s/pbspro-cluster-pod-server-configmap.yml
kubectl apply -f k8s/pbspro-cluster-pod-server-configmap.yml

kubectl delete -f k8s/pbspro-cluster-statefulset-node-configmap.yml
kubectl apply -f k8s/pbspro-cluster-statefulset-node-configmap.yml

sudo netstat -tulpn | grep LISTEN
cat < /dev/tcp/127.0.0.1/22
